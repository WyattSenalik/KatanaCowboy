using System.Collections.Generic;
using System.IO;
using UnityEditor;


namespace GameEventSystem.CustomEditor
{
    /// <summary>
    /// Initializes the event list when the unity editor loads up.
    /// For this reason, it is highly recommended that the file be placed in the .gitignore.
    /// </summary>
    [InitializeOnLoad]
    public class InitializeEventList
    {
        // How often to update
        private static int updateFrequency = 100;
        private static int curFrequency = 0;
        // Record of what was last in the file system
        private static List<string> previousEvents = new List<string>();
        private static bool creatingFile = false;


        /// <summary>
        /// Called on unity load. Creates the file.
        /// </summary>
        static InitializeEventList()
        {
            CreateFile();

            EditorApplication.update += UpdateCheck;
        }

        /// <summary>
        /// Called every frame by EditorApplication.update.
        /// </summary>
        private static void UpdateCheck()
        {
            if (++curFrequency > updateFrequency)
            {
                curFrequency = 0;

                Update();
            }
        }
        /// <summary>
        /// Called once every updatefrequency frames.
        /// </summary>
        private static void Update()
        {
            // If we are not currently creating the file
            if (!creatingFile)
            {
                // Re-create the file if it has changed since last time
                string[] curEvents = EventListFileManager.GetListOfEventNames();
                foreach (string eventName in curEvents)
                {
                    if (!previousEvents.Contains(eventName))
                    {
                        CreateFile();
                        break;
                    }
                }

                previousEvents = new List<string>(curEvents);
            }
        }



        /// <summary>
        /// Creates/updates the const static file with the event id's saved as const ints.
        /// </summary>
        public static void CreateFile()
        {
            creatingFile = true;
            UnityEngine.Debug.Log("CreatingFile");

            // Beginning and end of the file
            const string FILE_BEGIN_TEXT = "// DO NOT EDIT DIRECTLY. GENERATED BY InitializeEventList.cs" + "\r\r" +
            "public static class " + EventListFileManager.EVENTID_LIST_CLASS_NAME + "\r" +
            "{";
            const string FILE_END_TEXT = "}";

            // Generate lines to write for each event
            string[] eventConstLines = GenerateEventConstantLines();
            string[] writeLines = new string[eventConstLines.Length + 2];
            // First line is the begin text
            writeLines[0] = FILE_BEGIN_TEXT;
            // All other lines are the event constants
            for (int i = 0; i < eventConstLines.Length; ++i)
            {
                writeLines[i + 1] = "    " + eventConstLines[i];
            }
            // Last line is the end text
            writeLines[writeLines.Length - 1] = FILE_END_TEXT;

            // Check if the path exists
            if (!Directory.Exists(EventListFileManager.LIST_SAVE_PATH))
            {
                Directory.CreateDirectory(EventListFileManager.LIST_SAVE_PATH);
            }

            // Write to the file
            File.WriteAllLines(EventListFileManager.GetFullFilePath(), writeLines);

            creatingFile = false;
        }

        /// <summary>
        /// Creates and returns an array of strings that will serve as lines in the
        /// generated script to be public const ints.
        /// </summary>
        /// <returns>Array of strings that can be used as lines in the generated script.</returns>
        private static string[] GenerateEventConstantLines()
        {
            string[] eventList = EventListFileManager.GetListOfEventNames();
            string[] eventLines = new string[eventList.Length];
            for (int i = 0; i < eventLines.Length; ++i)
            {
                string eventName = eventList[i];
                string eventID = eventName;
                eventLines[i] = "public const string " + eventName + " = \"" + eventID + "\";";
            }
            return eventLines;
        }
    }
}
